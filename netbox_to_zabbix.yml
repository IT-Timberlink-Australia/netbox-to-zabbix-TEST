---
- name: Sync NetBox devices/VMs to Zabbix (CF groups, extra templates, robust tags)
  hosts: all
  gather_facts: false

  vars:
    zabbix_api_url: "{{ lookup('env', 'ZABBIX_API_URL') }}"
    zabbix_api_token: "{{ lookup('env', 'ZABBIX_API_TOKEN') }}"
    apply_changes: false

  tasks:
    # ---------------- Preconditions ----------------
    - name: Verify required env vars present
      assert:
        that:
          - zabbix_api_url is defined and zabbix_api_url | length > 0
          - zabbix_api_token is defined and zabbix_api_token | length > 0
        fail_msg: "ZABBIX_API_URL and/or ZABBIX_API_TOKEN are missing."

    - name: Ensure Zabbix template name is defined
      assert:
        that:
          - zabbix_template_name is defined
          - zabbix_template_name | length > 0
        fail_msg: "Missing Zabbix template name for {{ inventory_hostname }}"

    # ---------------- Primary template lookup ----------------
    - name: Lookup primary Zabbix template ID by exact name
      uri:
        url: "{{ zabbix_api_url }}"
        method: POST
        headers: { Content-Type: "application/json" }
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "template.get"
          params:
            output: ["templateid", "host"]
            filter:
              host: ["{{ zabbix_template_name }}"]
          auth: "{{ zabbix_api_token }}"
          id: 1
        validate_certs: false
      delegate_to: localhost
      register: zabbix_template_lookup
      failed_when:
        - zabbix_template_lookup.json.result | length == 0
        - zabbix_template_lookup.json.result | length > 1

    - name: Set primary template ID
      set_fact:
        template_id: "{{ zabbix_template_lookup.json.result[0].templateid }}"

    # ---------------- Normalize extra_zabbix_templates ----------------
    - name: Normalize extra_zabbix_templates to a clean name list
      set_fact:
        _raw_extra_tpls: "{{ extra_zabbix_templates | default([]) }}"
        _extra_tpl_names: >-
          {%- set out = [] -%}
          {%- if _raw_extra_tpls is string -%}
            {%- set s = _raw_extra_tpls
                        | replace('[',' ')
                        | replace(']',' ')
                        | replace('"',' ')
                        | replace("'",' ')
                        | replace(';', ',') -%}
            {%- for part in s.split(',') -%}
              {%- set name = part | trim -%}
              {%- if name|length > 0 -%}
                {%- set _ = out.append(name) -%}
              {%- endif -%}
            {%- endfor -%}
          {%- elif _raw_extra_tpls is sequence -%}
            {%- for x in _raw_extra_tpls -%}
              {%- if x is string and x|trim|length > 0 -%}
                {%- set _ = out.append(x|trim) -%}
              {%- elif x is mapping and x.name is defined and (x.name|string)|trim|length > 0 -%}
                {%- set _ = out.append((x.name|string)|trim) -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
          {{ out }}
      changed_when: false

    # ---------------- Lookup extra template IDs ----------------
    - name: Lookup extra Zabbix template IDs
      uri:
        url: "{{ zabbix_api_url }}"
        method: POST
        headers: { Content-Type: "application/json" }
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "template.get"
          params:
            output: ["templateid", "host"]
            filter:
              host: "{{ _extra_tpl_names }}"
          auth: "{{ zabbix_api_token }}"
          id: 1
        validate_certs: false
      delegate_to: localhost
      register: zbx_extra_tpl_lookup
      when: _extra_tpl_names | length > 0

    # ---------------- Build full template list ----------------
    - name: Build full template id set (primary + extras)
      set_fact:
        _template_ids_full: >-
          {%- set ids = [ (template_id|string) ] -%}
          {%- if zbx_extra_tpl_lookup is defined and zbx_extra_tpl_lookup.json.result is defined -%}
            {%- for t in zbx_extra_tpl_lookup.json.result -%}
              {%- if t.templateid is defined -%}
                {%- set _ = ids.append(t.templateid|string) -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
          {{ ids | unique }}

    - name: Build template objects (for use in create/update)
      set_fact:
        _template_objs: >-
          [ {% for id in _template_ids_full %}{"templateid": "{{ id }}"}{% if not loop.last %}, {% endif %}{% endfor %} ]

    # ---------------- Group selection ----------------
    - name: Compute desired group id from NetBox CF (int; fallback to 5)
      set_fact:
        desired_groupid: "{{ (zabbix_group_id | default(5)) | int }}"

    - name: Verify desired host group exists and is visible
      uri:
        url: "{{ zabbix_api_url }}"
        method: POST
        headers: { Content-Type: "application/json" }
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "hostgroup.get"
          params:
            output: ["groupid", "name"]
            groupids:
              - "{{ desired_groupid }}"
          auth: "{{ zabbix_api_token }}"
          id: 1
        validate_certs: false
      delegate_to: localhost
      register: zbx_group_lookup

    - name: Determine effective group id
      set_fact:
        effective_groupid: "{{ (zbx_group_lookup.json.result | length > 0) | ternary(desired_groupid, 5) }}"

    # ---------------- Proxy assignment ----------------
    - name: Determine proxy ID (if mapping provided)
      set_fact:
        proxy_id: "{{ site_to_proxy_mapping[site_id|string] | default(site_to_proxy_mapping['_default'] | default('')) }}"
      when: site_to_proxy_mapping is defined

    - name: Set proxy field
      set_fact:
        proxy_field: "{{ (proxy_id | length > 0) | ternary({'proxy_hostid': proxy_id}, {}) }}"
      when: proxy_id is defined

    # ---------------- Get existing host ----------------
    - name: Get existing host
      uri:
        url: "{{ zabbix_api_url }}"
        method: POST
        headers: { Content-Type: "application/json" }
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "host.get"
          params:
            output: ["hostid", "interfaces", "status"]
            filter:
              host: ["{{ inventory_hostname }}"]
          auth: "{{ zabbix_api_token }}"
          id: 1
        validate_certs: false
      delegate_to: localhost
      register: zabbix_host_check

    - name: Set host existence flags
      set_fact:
        host_exists: "{{ zabbix_host_check.json.result | length > 0 }}"
        host_missing: "{{ not host_exists }}"

    # ---------------- Set tags ----------------
    - name: Set tags and visible name
      set_fact:
        visible_name: >-
          {{ inventory_hostname }}{% if description is defined and description|length > 0 %} - {{ description | trim }}{% endif %}
        zabbix_tags: >-
          {%- set tags = [] -%}
          {%- set sla = sla_report_code | default(custom_fields.sla_report_code | default('unknown')) -%}
          {%- set _ = tags.append({"tag": "device", "value": sla|string }) -%}

          {%- set os_raw = ansible_network_os | default('') | lower -%}
          {%- set os_map = {
            'aoscx': 'arubaos-cx', 'aruba': 'arubaos-cx',
            'cisco': 'cisco-ios', 'forti': 'fortios',
            'synology': 'synology-dsm', 'apc': 'apc',
            'eaton': 'eaton', 'unifi': 'unifi',
            'ubiquiti': 'unifi', 'vmware': 'vmware-esxi',
            'esxi': 'vmware-esxi', 'windows': 'windows',
            'linux': 'linux', 'debian': 'linux', 'ubuntu': 'linux',
            'centos': 'linux', 'redhat': 'linux', 'rhel': 'linux'
          } -%}
          {%- set os_tag = os_map[os_map.keys() | select('in', os_raw) | list | first] | default('unknown') -%}
          {%- set _ = tags.append({"tag": "os", "value": os_tag }) -%}

          {%- set env = environment | default(custom_fields.environment | default('')) -%}
          {%- if env | length > 0 -%}
            {%- set _ = tags.append({"tag": "environment", "value": env }) -%}
          {%- endif -%}

          {%- if site_slug is defined -%}
            {%- set _ = tags.append({"tag": "site", "value": site_slug|string|lower }) -%}
          {%- endif -%}

          {%- set nbstat = status.value if status is mapping else status -%}
          {%- set _ = tags.append({"tag": "nb_status", "value": nbstat|string }) -%}

          {%- set _ = tags.append({"tag": "cmdb", "value": "true" }) -%}
          {{ tags }}

    # ---------------- Interfaces ----------------
    - name: Set interface list
      set_fact:
        interface_list:
          - type: "{{ 2 if 'snmp' in zabbix_template_name | lower else 1 }}"
            main: 1
            useip: 1
            ip: "{{ ansible_host }}"
            dns: ""
            port: "{{ '161' if 'snmp' in zabbix_template_name | lower else '10050' }}"
            details: >-
              {{ {"version": 2, "community": "{$SNMP_COMMUNITY}"} if 'snmp' in zabbix_template_name | lower else omit }}

    # ---------------- Create/update params ----------------
    - name: Set create params
      set_fact:
        zabbix_create_params: >-
          {{ {
            'host': inventory_hostname,
            'name': visible_name,
            'status': 0,
            'interfaces': interface_list,
            'groups': [ {'groupid': effective_groupid} ],
            'templates': _template_objs,
            'tags': zabbix_tags
          } | combine(proxy_field | default({})) }}
      when: host_missing

    - name: Set update params
      set_fact:
        zabbix_update_params: >-
          {{ {
            'hostid': zabbix_host_check.json.result[0].hostid,
            'name': visible_name,
            'status': 0,
            'groups': [ {'groupid': effective_groupid} ],
            'templates': _template_objs,
            'tags': zabbix_tags
          } | combine(proxy_field | default({})) }}
      when: host_exists

    # ---------------- API push ----------------
    - name: Create host
      uri:
        url: "{{ zabbix_api_url }}"
        method: POST
        headers: { Content-Type: "application/json" }
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "host.create"
          params: "{{ zabbix_create_params }}"
          auth: "{{ zabbix_api_token }}"
          id: 1
        validate_certs: false
      delegate_to: localhost
      when:
        - host_missing
        - apply_changes

    - name: Update host
      uri:
        url: "{{ zabbix_api_url }}"
        method: POST
        headers: { Content-Type: "application/json" }
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "host.update"
          params: "{{ zabbix_update_params }}"
          auth: "{{ zabbix_api_token }}"
          id: 1
        validate_certs: false
      delegate_to: localhost
      when:
        - host_exists
        - apply_changes

    - name: Dry run message
      debug:
        msg: "apply_changes=false → dry run only; no host changes pushed"
      when: not apply_changes
