---
- name: Sync NetBox devices/VMs to Zabbix using zabbix_group_id CF
  hosts: all
  gather_facts: false

  vars:
    # Injected via AWX credentials or env
    zabbix_api_url: "{{ lookup('env', 'ZABBIX_API_URL') }}"
    zabbix_api_token: "{{ lookup('env', 'ZABBIX_API_TOKEN') }}"
    snmp_community: "{{ lookup('env', 'SNMP_COMMUNITY') | default('public', true) }}"

    # Dry-run safety switch
    apply_changes: true

    # Manufacturer detection map (unchanged)
    manufacturer_map:
      apc: apc
      eaton: eaton
      aoscx: aruba
      cisco: cisco
      windows: microsoft
      linux: linux
      forti: fortinet
      unifi: unifi
      vmware: vmware

  tasks:
    # --- Preconditions ---
    - name: Verify required env vars present
      assert:
        that:
          - zabbix_api_url is defined and zabbix_api_url | length > 0
          - zabbix_api_token is defined and zabbix_api_token | length > 0
        fail_msg: "ZABBIX_API_URL and/or ZABBIX_API_TOKEN are missing."

    - name: Inventory sanity (quick visibility)
      debug:
        msg: |
          Device: {{ inventory_hostname }}
          IP: {{ ansible_host }}
          Description: "{{ description | default('Not provided') }}"
          Template Name: {{ zabbix_template_name | default('MISSING') }}
          zabbix_group_id (CF): {{ zabbix_group_id | default('MISSING') }}
          Site ID: {{ site_id | default('N/A') }}
          Site Slug: {{ site_slug | default('N/A') }}

    - name: Ensure Zabbix template name is defined
      assert:
        that:
          - zabbix_template_name is defined
          - zabbix_template_name | length > 0
        fail_msg: "Missing Zabbix template name for {{ inventory_hostname }}"

    # --- Template lookup ---
    - name: Lookup Zabbix template ID by exact name
      uri:
        url: "{{ zabbix_api_url }}"
        method: POST
        headers: { Content-Type: "application/json" }
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "template.get"
          params:
            output: ["templateid","host"]
            filter: { host: ["{{ zabbix_template_name }}"] }
            searchWildcardsEnabled: 0
          auth: "{{ zabbix_api_token }}"
          id: 1
        validate_certs: false
      delegate_to: localhost
      register: zabbix_template_lookup
      failed_when:
        - zabbix_template_lookup.json.result | length == 0
        - zabbix_template_lookup.json.result | length > 1

    - name: Set Zabbix template ID
      set_fact:
        template_id: "{{ zabbix_template_lookup.json.result[0].templateid }}"

    # --- Group ID from NetBox CF (with safe default = 5) ---
    - name: Compute desired group id from NetBox CF (int)
      set_fact:
        desired_groupid: "{{ (zabbix_group_id | default(5)) | int }}"

    # --- Proxy mapping still comes from AWX template vars (if you use it) ---
    - name: Determine proxy ID (by site_id with default)
      set_fact:
        proxy_id: "{{ site_to_proxy_mapping[site_id | string] | default(site_to_proxy_mapping['_default'] | default('')) | string }}"
      when: site_to_proxy_mapping is defined

    - name: Proxy field as mapping (for combine)
      set_fact:
        proxy_field: "{{ (proxy_id is defined and proxy_id | length > 0) | ternary({'proxy_hostid': proxy_id}, {}) }}"

    # --- Visible name & tags ---
    - name: Set visible name (include description if present)
      set_fact:
        visible_name: >-
          {{ inventory_hostname }}{% if description is defined and description|length > 0 %} - {{ description | trim }}{% endif %}

    - name: Build Zabbix host tags (manufacturer/site/status + cmdb)
      set_fact:
        zabbix_tags: >-
          {%- set tags = [] -%}
          {# manufacturer detection #}
          {%- set plat = (ansible_network_os | default(platform, true) | default('')) | lower -%}
          {%- set man = 'unknown' -%}
          {%- for key,val in manufacturer_map.items() -%}
            {%- if man == 'unknown' and (key in plat) -%}
              {%- set man = val -%}
            {%- endif -%}
          {%- endfor -%}
          {%- set _ = tags.append({"tag":"manufacturer","value":man}) -%}
          {%- if site_slug is defined and site_slug | length > 0 -%}
            {%- set _ = tags.append({"tag":"site","value": site_slug | lower }) -%}
          {%- endif -%}
          {%- set nbstat = status.value if status is mapping and status.value is defined else status -%}
          {%- set _ = tags.append({"tag":"nb_status","value": nbstat }) -%}
          {%- set _ = tags.append({"tag":"cmdb","value":"true"}) -%}
          {{ tags }}

    - name: Set Zabbix host status based on device status
      set_fact:
        zabbix_host_status: >-
          {% if status in ['active','Active',1,'1'] or (status.label | default('') | lower) == 'active' %}'0'{% else %}'1'{% endif %}

    # --- Interfaces as native lists ---
    - name: Set interface list for agent
      set_fact:
        interface_list:
          - { type: 1, main: 1, useip: 1, ip: "{{ ansible_host }}", dns: "", port: "10050" }
      when: "'agent' in (zabbix_template_name | lower)"

    - name: Set interface list for SNMP
      set_fact:
        interface_list:
          - { type: 2, main: 1, useip: 1, ip: "{{ ansible_host }}", dns: "", port: "161",
              details: { version: 2, community: "{$SNMP_COMMUNITY}" } }
      when: "'snmp' in (zabbix_template_name | lower)"

    - name: Set interface list for IPMI (fallback)
      set_fact:
        interface_list:
          - { type: 3, main: 1, useip: 1, ip: "{{ ansible_host }}", dns: "", port: "623" }
      when: interface_list is not defined

    # --- Macros as native lists ---
    - name: Set host macros for SNMP
      set_fact:
        host_macros:
          - { macro: "{$SNMP_COMMUNITY}", value: "{{ snmp_community }}" }
      when: "'snmp' in (zabbix_template_name | lower)"

    - name: Default empty macros
      set_fact:
        host_macros: []
      when: host_macros is not defined

    # --- Get/merge host details ---
    - name: Get existing host (with groups, templates, interfaces)
      uri:
        url: "{{ zabbix_api_url }}"
        method: POST
        headers: { Content-Type: "application/json" }
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "host.get"
          params:
            output: ["hostid","name","proxy_hostid","status"]
            selectGroups: ["groupid","name"]
            selectParentTemplates: ["templateid","host"]
            selectInterfaces: ["interfaceid","type","ip","dns","port","main","useip","details"]
            filter: { host: "{{ inventory_hostname }}" }
          auth: "{{ zabbix_api_token }}"
          id: 1
        validate_certs: false
      delegate_to: localhost
      register: zabbix_host_check

    - name: Build merged groups from existing + ensure CF group
      set_fact:
        merged_groups: >-
          {%- set groups = [] -%}
          {%- if zabbix_host_check.json.result | length > 0 -%}
            {%- for g in zabbix_host_check.json.result[0].groups -%}
              {%- set _ = groups.append({'groupid': (g.groupid | int)}) -%}
            {%- endfor -%}
          {%- endif -%}
          {%- if groups | selectattr('groupid','equalto', (desired_groupid | int)) | list | length == 0 -%}
            {%- set _ = groups.append({'groupid': (desired_groupid | int)}) -%}
          {%- endif -%}
          {{ groups }}

    # --- Build params ---
    - name: Build Zabbix host create params (combine proxy_field)
      set_fact:
        zabbix_create_params: >-
          {{
            {
              'host': inventory_hostname,
              'name': visible_name,
              'status': zabbix_host_status,
              'interfaces': interface_list,
              'groups': [ { 'groupid': (desired_groupid | int) } ],
              'templates': [ { 'templateid': template_id } ],
              'tags': zabbix_tags,
              'macros': host_macros
            } | combine(proxy_field | default({}))
          }}
      when: zabbix_host_check.json.result | length == 0

    - name: Build Zabbix host update params (combine proxy_field)
      set_fact:
        zabbix_update_params: >-
          {{
            {
              'hostid': zabbix_host_check.json.result[0].hostid,
              'name': visible_name,
              'status': zabbix_host_status,
              'groups': merged_groups,
              'templates': (
                  (zabbix_host_check.json.result[0].parentTemplates | map(attribute='templateid') | list)
                  | map('int')
                  | list
                ) | unique | map('string') | list | map('regex_replace','^(.*)$','{\"templateid\": \"\\1\"}') | map('from_yaml') | list
              ,
              'tags': zabbix_tags,
              'macros': host_macros
            } | combine(proxy_field | default({}))
          }}
      when: zabbix_host_check.json.result | length > 0

    # --- Optional: reconcile primary interface on change ---
    - name: Reconcile main interface if host exists (simple replace on change)
      when: zabbix_host_check.json.result | length > 0
      block:
        - name: Find current main interface
          set_fact:
            current_main_iface: "{{ (zabbix_host_check.json.result[0].interfaces | selectattr('main','equalto','1') | list | first) | default(None) }}"

        - name: Update interface if type/IP/port differ
          uri:
            url: "{{ zabbix_api_url }}"
            method: POST
            headers: { Content-Type: "application/json" }
            body_format: json
            body:
              jsonrpc: "2.0"
              method: "hostinterface.update"
              params:
                interfaceid: "{{ current_main_iface.interfaceid }}"
                type: "{{ interface_list[0].type }}"
                useip: "{{ interface_list[0].useip }}"
                ip: "{{ interface_list[0].ip }}"
                dns: "{{ interface_list[0].dns }}"
                port: "{{ interface_list[0].port }}"
                details: "{{ interface_list[0].details | default(omit) }}"
              auth: "{{ zabbix_api_token }}"
              id: 1
            validate_certs: false
          delegate_to: localhost
          when: current_main_iface is not none and
                ( current_main_iface.type|string != interface_list[0].type|string
                  or current_main_iface.ip != interface_list[0].ip
                  or current_main_iface.port|string != interface_list[0].port|string )

    # --- Create / Update ---
    - name: Create new host in Zabbix
      uri:
        url: "{{ zabbix_api_url }}"
        method: POST
        headers: { Content-Type: "application/json" }
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "host.create"
          params: "{{ zabbix_create_params }}"
          auth: "{{ zabbix_api_token }}"
          id: 1
        validate_certs: false
      delegate_to: localhost
      when:
        - zabbix_host_check.json.result | length == 0
        - apply_changes | bool

    - name: Update existing host in Zabbix
      uri:
        url: "{{ zabbix_api_url }}"
        method: POST
        headers: { Content-Type: "application/json" }
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "host.update"
          params: "{{ zabbix_update_params }}"
          auth: "{{ zabbix_api_token }}"
          id: 1
        validate_certs: false
      delegate_to: localhost
      when:
        - zabbix_host_check.json.result | length > 0
        - apply_changes | bool

    - name: DRY-RUN notice (no changes applied)
      debug:
        msg: "apply_changes=false: Zabbix create/update requests were skipped for {{ inventory_hostname }}."
      when: not apply_changes | bool
