---
- name: Sync NetBox devices/VMs to Zabbix using zabbix_group_id CF (authoritative groups + robust tags)
  hosts: all
  gather_facts: false

  vars:
    # Zabbix connection (from AWX credentials or env)
    zabbix_api_url: "{{ lookup('env', 'ZABBIX_API_URL') }}"
    zabbix_api_token: "{{ lookup('env', 'ZABBIX_API_TOKEN') }}"

    # Dry-run switch
    apply_changes: true

    # Optional proxy mapping (only used if provided via AWX extra vars)
    # site_to_proxy_mapping:
    #   _default: ""
    #   "101": "12345"

  tasks:
    # ---------------- Preconditions ----------------
    - name: Verify required env vars present
      assert:
        that:
          - zabbix_api_url is defined and zabbix_api_url | length > 0
          - zabbix_api_token is defined and zabbix_api_token | length > 0
        fail_msg: "ZABBIX_API_URL and/or ZABBIX_API_TOKEN are missing."

    - name: Quick visibility (host inputs)
      debug:
        msg:
          inv_host: "{{ inventory_hostname }}"
          ip: "{{ ansible_host }}"
          description: "{{ description | default('Not provided') }}"
          template: "{{ zabbix_template_name | default('MISSING') }}"
          zabbix_group_id_cf: "{{ zabbix_group_id | default('') }}"
          zabbix_group_id_cf_nested: "{{ custom_fields.sla_report_code | default('') }}"
          site_slug: "{{ site_slug | default('') }}"
          status: "{{ status | default('') }}"

    - name: Ensure Zabbix template name is defined
      assert:
        that:
          - zabbix_template_name is defined
          - zabbix_template_name | length > 0
        fail_msg: "Missing Zabbix template name for {{ inventory_hostname }}"

    # ---------------- Template lookup ----------------
    - name: Lookup Zabbix template ID by exact name
      uri:
        url: "{{ zabbix_api_url }}"
        method: POST
        headers: { Content-Type: "application/json" }
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "template.get"
          params:
            output: ["templateid","host"]
            filter: { host: ["{{ zabbix_template_name }}"] }
            searchWildcardsEnabled: 0
          auth: "{{ zabbix_api_token }}"
          id: 1
        validate_certs: false
      delegate_to: localhost
      register: zabbix_template_lookup
      failed_when:
        - zabbix_template_lookup.json.result | length == 0
        - zabbix_template_lookup.json.result | length > 1

    - name: Set Zabbix template ID
      set_fact:
        template_id: "{{ zabbix_template_lookup.json.result[0].templateid }}"

    # ---------------- Group selection (authoritative) ----------------
    - name: Compute desired group id from NetBox CF (int; fallback to 5 if CF missing)
      set_fact:
        desired_groupid: "{{ (zabbix_group_id | default(5)) | int }}"

    - name: Verify desired host group exists and is visible
      uri:
        url: "{{ zabbix_api_url }}"
        method: POST
        headers: { Content-Type: "application/json" }
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "hostgroup.get"
          params:
            output: ["groupid","name"]
            groupids: [ {{ desired_groupid | int }} ]
          auth: "{{ zabbix_api_token }}"
          id: 1
        validate_certs: false
      delegate_to: localhost
      register: zbx_group_lookup

    - name: Determine effective group id (fallback to 5 if not found/visible)
      set_fact:
        effective_groupid: "{{ (zbx_group_lookup.json.result | length > 0) | ternary(desired_groupid | int, 5) }}"

    - name: Warn when falling back to default group
      debug:
        msg: "Desired group {{ desired_groupid }} not found/visible; falling back to 5 for {{ inventory_hostname }}."
      when: effective_groupid | int != desired_groupid | int

    # ---------------- Proxy (optional) ----------------
    - name: Determine proxy ID (if mapping provided)
      set_fact:
        proxy_id: "{{ site_to_proxy_mapping[site_id | string] | default(site_to_proxy_mapping['_default'] | default('')) | string }}"
      when: site_to_proxy_mapping is defined

    - name: Proxy field mapping (only if proxy_id truthy)
      set_fact:
        proxy_field: "{{ (proxy_id is defined and proxy_id | length > 0) | ternary({'proxy_hostid': proxy_id}, {}) }}"

    # ---------------- Visible name & status ----------------
    - name: Set visible name (include description if present)
      set_fact:
        visible_name: >-
          {{ inventory_hostname }}{% if description is defined and description|length > 0 %} - {{ description | trim }}{% endif %}

    - name: Set Zabbix host status (int)
      set_fact:
        zabbix_host_status: "{{ 0 if (status in ['active','Active',1,'1'] or (status.label | default('') | lower) == 'active') else 1 }}"

    # ---------------- Interfaces (native lists) ----------------
    - name: Set interface list for agent
      set_fact:
        interface_list:
          - { type: 1, main: 1, useip: 1, ip: "{{ ansible_host }}", dns: "", port: "10050" }
      when: "'agent' in (zabbix_template_name | lower)"

    - name: Set interface list for SNMP (uses global {$SNMP_COMMUNITY})
      set_fact:
        interface_list:
          - { type: 2, main: 1, useip: 1, ip: "{{ ansible_host }}", dns: "", port: "161",
              details: { version: 2, community: "{$SNMP_COMMUNITY}" } }
      when: "'snmp' in (zabbix_template_name | lower)"

    - name: Set interface list for IPMI (fallback)
      set_fact:
        interface_list:
          - { type: 3, main: 1, useip: 1, ip: "{{ ansible_host }}", dns: "", port: "623" }
      when: interface_list is not defined

    # ---------------- Robust tag helpers & tag build ----------------
    - name: Derive SLA code and manufacturer safely
      set_fact:
        nb_sla_code: >-
          {{ (sla_report_code
              if (sla_report_code is defined and (sla_report_code|string)|length > 0)
              else (custom_fields.sla_report_code | default('')))
             | string }}
        nb_manufacturer: >-
          {% set man = '' %}
          {% if device_type is defined and device_type and (device_type.manufacturer is defined) and device_type.manufacturer %}
            {% set man = (device_type.manufacturer.slug | default(device_type.manufacturer.name, true) | string | lower) %}
          {% endif %}
          {% if man == '' and manufacturer is defined and manufacturer %}
            {% set man = (manufacturer.slug | default(manufacturer.name, true) | string | lower) %}
          {% endif %}
          {% if man == '' %}
            {% set p = (platform.slug | default(platform.name, true) | default(platform, true) | default('', true)) | string | lower %}
            {% set os = (ansible_network_os | default('')) | string | lower %}
            {% if 'aoscx' in p or 'aruba' in p %}{% set man = 'aruba' %}
            {% elif 'cisco' in p or 'ios' in p or 'nxos' in p or 'cisco' in os or 'ios' in os or 'nxos' in os %}{% set man = 'cisco' %}
            {% elif 'forti' in p or 'forti' in os %}{% set man = 'fortinet' %}
            {% elif 'juniper' in p or 'junos' in os %}{% set man = 'juniper' %}
            {% elif 'vmware' in p or 'esxi' in p or 'vmware' in os %}{% set man = 'vmware' %}
            {% elif 'windows' in p or 'windows' in os %}{% set man = 'microsoft' %}
            {% elif 'linux' in p or 'linux' in os %}{% set man = 'linux' %}
            {% elif 'eaton' in p %}{% set man = 'eaton' %}
            {% elif 'apc' in p %}{% set man = 'apc' %}
            {% endif %}
          {% endif %}
          {{ man if man != '' else 'unknown' }}

    - name: Build Zabbix host tags (manufacturer + SLA CF + site/status/cmdb)
      set_fact:
        zabbix_tags: >-
          {%- set tags = [] -%}
          {%- if nb_sla_code | length > 0 -%}
            {%- set _ = tags.append({"tag":"device","value": nb_sla_code }) -%}
          {%- else -%}
            {%- set _ = tags.append({"tag":"device","value":"unknown"}) -%}
          {%- endif -%}
          {%- set _ = tags.append({"tag":"manufacturer","value": nb_manufacturer }) -%}
          {%- if site_slug is defined and (site_slug|string)|length > 0 -%}
            {%- set _ = tags.append({"tag":"site","value": (site_slug|string|lower) }) -%}
          {%- endif -%}
          {%- set nbstat = status.value if (status is mapping and status.value is defined) else status -%}
          {%- set _ = tags.append({"tag":"nb_status","value": (nbstat|string) }) -%}
          {%- set _ = tags.append({"tag":"cmdb","value":"true"}) -%}
          {{ tags }}

    # ---------------- Read existing host ----------------
    - name: Get existing host (with interfaces)
      uri:
        url: "{{ zabbix_api_url }}"
        method: POST
        headers: { Content-Type: "application/json" }
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "host.get"
          params:
            output: ["hostid","name","proxy_hostid","status"]
            selectInterfaces: ["interfaceid","type","ip","dns","port","main","useip","details"]
            filter: { host: "{{ inventory_hostname }}" }
          auth: "{{ zabbix_api_token }}"
          id: 1
        validate_certs: false
      delegate_to: localhost
      register: zabbix_host_check

    # ---------------- Build params (authoritative groups; macros omitted) ----------------
    - name: Build Zabbix host create params
      set_fact:
        zabbix_create_params: >-
          {{
            {
              'host': inventory_hostname,
              'name': visible_name,
              'status': (zabbix_host_status | int),
              'interfaces': interface_list,
              'groups': [ { 'groupid': (effective_groupid | int) } ],
              'templates': [ { 'templateid': template_id } ],
              'tags': zabbix_tags
              # 'macros': omit (we rely on global {$SNMP_COMMUNITY})
            } | combine(proxy_field | default({}))
          }}
      when: zabbix_host_check.json.result | length == 0

    - name: Build Zabbix host update params (REPLACE groups)
      set_fact:
        zabbix_update_params: >-
          {{
            {
              'hostid': zabbix_host_check.json.result[0].hostid,
              'name': visible_name,
              'status': (zabbix_host_status | int),
              'groups': [ { 'groupid': (effective_groupid | int) } ],
              'templates': [ { 'templateid': template_id } ],
              'tags': zabbix_tags
              # 'macros': omit
            } | combine(proxy_field | default({}))
          }}
      when: zabbix_host_check.json.result | length > 0

    # ---------------- Optional: reconcile main interface ----------------
    - name: Reconcile main interface if host exists (simple replace on change)
      when: zabbix_host_check.json.result | length > 0
      block:
        - name: Find current main interface
          set_fact:
            current_main_iface: "{{ (zabbix_host_check.json.result[0].interfaces | selectattr('main','equalto','1') | list | first) | default(None) }}"
        - name: Update interface if type/IP/port differ
          uri:
            url: "{{ zabbix_api_url }}"
            method: POST
            headers: { Content-Type: "application/json" }
            body_format: json
            body:
              jsonrpc: "2.0"
              method: "hostinterface.update"
              params:
                interfaceid: "{{ current_main_iface.interfaceid }}"
                type: "{{ interface_list[0].type }}"
                useip: "{{ interface_list[0].useip }}"
                ip: "{{ interface_list[0].ip }}"
                dns: "{{ interface_list[0].dns }}"
                port: "{{ interface_list[0].port }}"
                details: "{{ interface_list[0].details | default(omit) }}"
              auth: "{{ zabbix_api_token }}"
              id: 1
            validate_certs: false
          delegate_to: localhost
          when: current_main_iface is not none and
                ( current_main_iface.type|string != interface_list[0].type|string
                  or current_main_iface.ip != interface_list[0].ip
                  or current_main_iface.port|string != interface_list[0].port|string )

    # ---------------- Create / Update ----------------
    - name: Create new host in Zabbix
      uri:
        url: "{{ zabbix_api_url }}"
        method: POST
        headers: { Content-Type: "application/json" }
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "host.create"
          params: "{{ zabbix_create_params }}"
          auth: "{{ zabbix_api_token }}"
          id: 1
        validate_certs: false
      delegate_to: localhost
      when:
        - zabbix_host_check.json.result | length == 0
        - apply_changes | bool

    - name: Update existing host in Zabbix
      uri:
        url: "{{ zabbix_api_url }}"
        method: POST
        headers: { Content-Type: "application/json" }
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "host.update"
          params: "{{ zabbix_update_params }}"
          auth: "{{ zabbix_api_token }}"
          id: 1
        validate_certs: false
      delegate_to: localhost
      when:
        - zabbix_host_check.json.result | length > 0
        - apply_changes | bool

    - name: DRY-RUN notice (no changes applied)
      debug:
        msg: "apply_changes=false: Zabbix create/update requests were skipped for {{ inventory_hostname }}."
      when: not apply_changes | bool
